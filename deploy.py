# -*- coding: utf-8 -*-
"""Deploy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Zxju-6msgHw3Zaz9WdnYxUzH0BgtK-8
"""

import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

st.title("üè† House Price Predictor")
st.write("Upload a CSV file with house data to predict prices.")

uploaded_file = st.file_uploader("Upload your CSV file", type=["csv"])

if uploaded_file is not None:
    # Load the data
    df = pd.read_csv(uploaded_file)
    st.subheader("Uploaded Data Preview")
    st.write(df.head())

    if 'price' not in df.columns:
        st.error("The dataset must include a 'price' column as the target.")
    else:
        # Features and target
        X = df.drop('price', axis=1)
        y = df['price']

        # Simple train-test split
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Model training
        model = LinearRegression()
        model.fit(X_train, y_train)

        # Prediction and evaluation
        predictions = model.predict(X_test)
        mse = mean_squared_error(y_test, predictions)

        st.subheader("Model Performance")
        st.write(f"Mean Squared Error on Test Set: {mse:.2f}")

        # Predict on new data
        st.subheader("Make Predictions")
        st.write("Upload new data without the 'price' column to make predictions.")

        new_file = st.file_uploader("Upload new data for prediction", type=["csv"], key="predict")

        if new_file is not None:
            new_data = pd.read_csv(new_file)
            st.write("New Data Preview:")
            st.write(new_data.head())

            try:
                new_preds = model.predict(new_data)
                new_data['predicted_price'] = new_preds
                st.subheader("Predictions")
                st.write(new_data)
                st.download_button("Download Predictions", new_data.to_csv(index=False), "predictions.csv", "text/csv")
            except Exception as e:
                st.error(f"Prediction failed: {e}")